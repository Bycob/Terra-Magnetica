PROJET ACTUEL :

# NIVEAU 1 : salle bonus en haut
- finir le décor (racines)
	# Refonte graphique, Ajouts
	- entrée mine sud NIVEAU 1
	- transformer les petites textures herbeuses en une grande texture unique.

# NIVEAU 2 : salle 2, 14/01
- ajouter les images pour les pièges hors d'état de nuire, les pièges activés
- lier les dialogues de l'éditeur à la classe parente
- faire l'interruption de fin de niveau qui mène à la sortie. Bloquer la sortie avec <des lasers / un monstre vraiment gros>
	et permettre à la créature de débloquer celle-ci.
- le log
- lister les graphismes nécessaires pour la fin du niveau 2
- corriger la légère imperfection sur les polices de caractères (à voir avec la FontMachine...)


# Niveau super hard
- Ajouter 3 salles (idées : salle des générateurs, salle des ondulateurs, labyrinthe...)

Bugs à corriger :
	( * Mode histoire : Affiche salle 1 alors que c'est pas le cas (niveau 2) )
	( * Lumière sur le niveau 1 )													 -> CES BUGS SONT CORRIGES ?
	( * L'histoire ne s'affiche pas lorsqu'on ouvre le niveau 1 sur une nouvelle save )
	* La créature ne bouge pas quand il n'y a pas de chemin.
	* Suppression : faire une zone par défaut.
	* Rocher : indiquer en noir.
	
Entités à faire :
- décor jungle, décor lv1
- arbre
- lampe 3D
- buissons
- lianes
- fruits
- rocher magnétique	

___________________________________________________________________________________________________

GAMEPLAY :
- Rocher magnetique : peut être déplacé par activation d'un levier ou sur une zone magnetique qui change en fct de l'état
des lampes.
- plantes carnivores
- lianes qui bloquent le chemin
- un cristal rouge, rond, qui pousse le joueur au lieu de le tuer, et qui est attiré par les lampes rouges et
repoussé par les lampes jaunes.

___________________________________________________________________________________________________

[Technique] A FAIRE (pour le 15/08 ~) :
- Moteur physique
- Update vers la version 3.0 de lwjgl
- Rendre les rendus plus cool à manipuler, et plus centralisés (RenderObject, RenderMachine)

class RenderMachine : Remplacera les animations managers (qui servent à rien tout compte fait) {
	
	//Tout plein d'animations, une par défaut.
	//les renderMachine seront gérés par la méthode update() dans Entity.
	
	action(Action) : active une animation particulière, puis retourne à L'ANIMATION PAR DEFAUT (ou autre si précisé).
}

___________________________________________________________________________________________________

Idées données par les testeurs :
- une flèche pour indiquer l'aimant le plus proche (arrivant trop vite!) et un signe pour indiquer SI il arrive trop vite.
- Passage d'une salle à une autre grâce à une clé (point de passage verrouillé tant qu'on ne l'a pas)
- Intégrer l'éditeur de niveau au jeu
- Ecran "vous êtes mort !"

___________________________________________________________________________________________________

Améliorations :

___________________________________________________________________________________________________

Autres idées :
- Invincibilité et superpouvoirs en mode débug (et peut-être un mode invincible ?...)
- Autres module : forêt avec construction libre. On doit alors récolter des items pour pouvoir construire, il y a des
	étendues d'eau. L'histoire se passera après la découverte : ce sera donc la colonisation.
- Programmation modulaire : un ensemble de module avec une histoire propre, possibilité de supprimer ou d'ajouter des
	modules grâce à un launcher spécifique.
- écran de chargement

- ### Gestionnaire de textures ###
	# Donne l'ID d'une texture du jeu, permet de l'afficher, trie les textures en fonction du niveau, du décor...
	# Permet au graphiste d'ajouter des textures pour son niveau. (Il faudra alors penser à une manière d'exporter
		le niveau AVEC les textures ajoutées par le graphiste.)
	# Possibilité d'ajouter une texture au jeu (et non au niveau)

___________________________________________________________________________________________________

Idées techniques
- Virtual loading : Les textures sont "virtuellement" chargées lors de l'appel de loadTextureSet(). Ensuite, au
	fur et à mesure que l'on appelle les textures, elles se chargent (si une texture est inutile dans une salle
	particulière, alors elle n'est pas chargée).
- Le RessourceManager sauvegarde la dernière description de niveau chargée. Ainsi, celle-ci n'est chargée qu'une
	seule fois si l'utilisateur fait deux fois le même niveau en mode histoire.

<!>
- Moteur physique un peu ridicule... Et si on en faisait un vrai ?
	* Entièrement géré par la classe EntityMoving
	* Séparation des méthodes du moteur physique et le reste
	* Méthode centrale : EntityMoving#update() gère TOUTES les caractéristiques du moteur. La travailler, séparer
		commenter attentivement.
	* fonctionnalités éventuelles à ajouter : forces (ex : force motrices pour les entités qui bougent toutes seules),
		angle (pas nécessaire, mais construire le moteur pour pouvoir accepter ça)

___________________________________________________________________________________________________

Détail des niveaux :
- Premier niveau
	General
		*ajouter les décorations.
	Salle 1 :
		*faire les salles bonus.
		*Lorsqu'on approche du portail bonus du haut, le paysage devient plus végétal.
		*Portail du bas : paysage minier (gemmes, pierres précieuses...)

- Deuxième niveau
	Nouveau gameplay :
		* Deuxième salle
			La bestiole qui réveille l'aventurier doit être capturée dans un labyrinthe. C'est en effet
			un ami qui le suivra toute la suite de l'aventure. 
			Pour la capturer, on doit la pousser dans des pièges en l'effrayant.
	Indicateurs nécessaires - salle 1 :
		* Ampoules situées à des endroits stratégiques
		* Fenêtres d'explication des commandes à divers endroits :
			- Lorsque le joueur arrive devant les murs à désactiver -> appuyer sur "Entrer"
		* Parfois un scrolling suffit
		
___________________________________________________________________________________________________
